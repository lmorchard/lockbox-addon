{
    "docs": [
        {
            "location": "/", 
            "text": "Lockbox for desktop\n\n\nWelcome to the Lockbox desktop addon documentation!", 
            "title": "Introduction"
        }, 
        {
            "location": "/#lockbox-for-desktop", 
            "text": "Welcome to the Lockbox desktop addon documentation!", 
            "title": "Lockbox for desktop"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Firefox Lockbox for Desktop Release Notes\n\n\n2.0.0-alpha\n\n\nDate: TBD\n\n\nWhat's New\n\n\nTBD\n\n\nWhat's Fixed\n\n\nTBD\n\n\nKnown Issues\n\n\nTBD", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#firefox-lockbox-for-desktop-release-notes", 
            "text": "", 
            "title": "Firefox Lockbox for Desktop Release Notes"
        }, 
        {
            "location": "/release-notes/#200-alpha", 
            "text": "Date: TBD", 
            "title": "2.0.0-alpha"
        }, 
        {
            "location": "/release-notes/#whats-new", 
            "text": "TBD", 
            "title": "What's New"
        }, 
        {
            "location": "/release-notes/#whats-fixed", 
            "text": "TBD", 
            "title": "What's Fixed"
        }, 
        {
            "location": "/release-notes/#known-issues", 
            "text": "TBD", 
            "title": "Known Issues"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nThank you for considering and taking the time to contribute! \nPlease note: this project is not currently or actively planning to fix non-critical (data loss, security related) bugs or implement new features.\n This is an experimental prototype.\n\n\nThe following are guidelines for contributing to this project.\n\n\nCode of Conduct\n\n\nThis repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the \nMozilla Community Participation Guidelines\n and \nDeveloper Etiquette Guidelines\n.\n\n\nHow to Get Started\n\n\nPlease refer to installation and build instructions in the \ninstall documentation\n.\n\n\nHow to Report Bugs\n\n\nPlease open \na new issue in the appropriate GitHub repository\n with steps to reproduce the problem you're experiencing.\n\n\nBe sure to include as much information including screenshots, text output, and both your expected and actual results.\n\n\nHow to Request Enhancements\n\n\nFirst, please refer to the applicable \nGitHub repository\n and search \nthe repository's GitHub issues\n to make sure your idea has not been (or is not still) considered. It may also be easier to see and search across all projects combined on our \nWaffle.io planning board\n.\n\n\nThen, please \ncreate a new issue in the GitHub repository\n describing your enhancement.\n\n\nBe sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.\n\n\nPlease keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.\n\n\nHow to Contribute Code\n\n\nBefore you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of \ngood first issues\n and find something that sounds interesting.\n\n\nIf there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to \nfile an issue\n first.\n\n\nOnce you have a patch ready:\n\n\n\n\nMake sure all tests are passing and try to add tests for the code you've written.\n\n\nSubmit a pull request! From there, we'll guide you through the review process to the eventual landing of your code! We aim to respond to all review requests within two business days.", 
            "title": "Contribute"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Thank you for considering and taking the time to contribute!  Please note: this project is not currently or actively planning to fix non-critical (data loss, security related) bugs or implement new features.  This is an experimental prototype.  The following are guidelines for contributing to this project.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#code-of-conduct", 
            "text": "This repository is governed by Mozilla's code of conduct and etiquette guidelines. For more details please see the  Mozilla Community Participation Guidelines  and  Developer Etiquette Guidelines .", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/contributing/#how-to-get-started", 
            "text": "Please refer to installation and build instructions in the  install documentation .", 
            "title": "How to Get Started"
        }, 
        {
            "location": "/contributing/#how-to-report-bugs", 
            "text": "Please open  a new issue in the appropriate GitHub repository  with steps to reproduce the problem you're experiencing.  Be sure to include as much information including screenshots, text output, and both your expected and actual results.", 
            "title": "How to Report Bugs"
        }, 
        {
            "location": "/contributing/#how-to-request-enhancements", 
            "text": "First, please refer to the applicable  GitHub repository  and search  the repository's GitHub issues  to make sure your idea has not been (or is not still) considered. It may also be easier to see and search across all projects combined on our  Waffle.io planning board .  Then, please  create a new issue in the GitHub repository  describing your enhancement.  Be sure to include as much detail as possible including step-by-step descriptions, specific examples, screenshots or mockups, and reasoning for why the enhancement might be worthwhile.  Please keep in mind, by opening an issue we provide no guarantee the enhancement will be implemented.", 
            "title": "How to Request Enhancements"
        }, 
        {
            "location": "/contributing/#how-to-contribute-code", 
            "text": "Before you get started writing code, be sure what you plan to work on is something we'll be able to accept. The easiest way is to look through out list of  good first issues  and find something that sounds interesting.  If there's something else you'd like to work on, just add a comment in the relevant issue and we'll be happy to discuss your plans. If you have an idea that doesn't have an issue at all, be sure to  file an issue  first.  Once you have a patch ready:   Make sure all tests are passing and try to add tests for the code you've written.  Submit a pull request! From there, we'll guide you through the review process to the eventual landing of your code! We aim to respond to all review requests within two business days.", 
            "title": "How to Contribute Code"
        }, 
        {
            "location": "/metrics/", 
            "text": "Lockbox Metrics Plan\n\n\nLast Updated: Feb 19, 2018\n\n\n\n\n\n\n\nAnalysis\n\n\nCollection\n\n\nEvent Registration and Recording\n\n\n\n\n\n\nScalar Metrics\n\n\nList of Events Currently Recorded\n\n\nReferences\n\n\n\n\n\n\n\nThis is the metrics collection plan for Lockbox. It documents all events currently collected through telemetry, as well those planned for collection but not currently implemented. It will be updated periodically to reflect all new and planned data collection.\n\n\nAnalysis\n\n\nData collection is done solely for the purpose of product development, improvement and maintenance. Specifically, it is done to help its creators examine the validity of the following hypothesis.\n\n\nCore Hypothesis: \nWe believe that people want the browser to do more than only remember their passwords.\n\n\nWe will know this to be true when:\n\n\n\n\n\n\nThe password generator is clicked 20% of the time a new entry is created. \nThis will indicate that users value the ability to create secure passwords.\n (Events regarding password generation will be added when feature development is complete)\n\n\n\n\n\n\n75% of Lockbox downloads result in a Firefox account attached. \nThis will indicate that users value secure storage for their credentials.\n We currently record the event \nfxaUpgrade\n to know whether a user has attached an Firefox account to their lockbox installation.\n\n\n\n\n\n\n60% of users choose to import their existing credentials from Firefox into Lockbox. \nThis will indicate that users trust lockbox more than the browser for managing their credentials.\n (Events regarding the importing of credentials from the firefox password manager will be added when feature development is complete)\n\n\n\n\n\n\nWe observe increased engagement with the management system (Create-Read-Update-Delete; CRUD) for users that import their credentials. \nThis will indicate that users value greater visibility into the number of accounts that they have.\n We currently record \nrender\n events when a user opens the credential manager.\n\n\n\n\n\n\nCRUD usage rates are comparable to Firefox login manager usage prior to lockbox installation. \nThis will indicate that users value Lockbox's credential management system, and use it to access credentials when they are needed.\n Firefox telemetry currently collects data on password autofill usage, which requires credentials be stored in the firefox password manager. We plan to compare lockbox credential usage (e.g. via the \nusernameCopied\n and \npasswordCopied\n lockbox events) to pre-lockbox autofill frequencies on a per-user basis.\n\n\n\n\n\n\n20% of Lockbox users access their datastore on more than 1 device, \nindicating that users value having a single datastore of credentials.\n\n\n\n\n\n\nOther questions we aim to answer through data collection, but are not directly related to the hypothesis above:\n\n\n\n\nDo people Save Passwords in Lockbox?\n\n\nHow many? (measured by count of items saved per user)\n\n\nHow often? (number of credentials saved per user per time interval)\n\n\n\n\n\n\nDo people create their own passwords or use Lockbox to generate them?\n\n\nRatio: (Number of times the PW generator is used when storing an item) / (number of credentials stored)\n\n\n\n\n\n\nWhen using the pw generator, do people create purely random passwords or customize them with their own input? (if this is going to be in the final design)\n\n\nDo people use the passwords they store on Lockbox?\n\n\nHow many times (per some unit of time) do stored credentials get filled?\n\n\nHow many times (per some unit of time) do stored credentials get copied?\n\n\n\n\n\n\nHow many times do users click to reveal a password?\n\n\nDo people continue to use Lockbox after first use?\n\n\nOut of those who install, how many use it more than once?\n\n\n\n\n\n\nWhere are the drop-off points in the user flow?\n\n\nDo the majority of people make it all the way through the setup process?\n\n\nOnce initially setup, do people continue to add credentials?\n\n\n\n\n\n\nDo people sync their passwords between Firefox instances?\n\n\nHow does syncing affect engagement?\n\n\n\n\n\n\n\n\nCollection\n\n\nAt this point, all measurements related to Lockbox will be made client-side. However, future releases will give users the option to sync their Lockbox data via an FxA account, at which point additional measurements will be logged server-side through the FxA data pipeline. We are not directly responsible for the measurements made through that mechanism.\n\n\nFor our internal alpha release, we will be making use of the public JavaScript API that allows recording and sending of event data and scalar data through an add-on. The API is documented here:\n\n\nhttps://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api\n\n\nOnce events are logged in the client they should appear in \nabout:telemetry\n. From there they will be submitted in the main ping payload under \nprocesses.dynamic.events\n and available through the usual services (STMO and ATMO), as well as amplitude.\n\n\nEvent Registration and Recording\n\n\nThe events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of:\n\n\n[timestamp, category, method, object, value, extra]\n\n\nThe API takes care of the timestamp for us. We just need to define \ncategory\n, \nmethod\n, \nobject\n and \nextra\n (\nvalue\n is optional and we won't use it).\n\n\nBecause we are using the API through an add-on it \nisn't\n necessary that we include an events.yaml file.\n\n\nInstead we will define our events by \nregistering\n them using a call to \nServices.telemetry.registerEvents(category, eventData)\n.\n\n\nHere's a breakdown of how a to register a typical event:\n\n\nServices.telemetry.registerEvents(\nevent_category\n, {\n    \nevent_name\n: {\n        methods: [\nclick\n, ... ], // types of events that can occur\n        objects: [\na_button\n, ... ], // objects event can occur on\n        extra: {\nkey\n: \nvalue\n, ... } // key-value pairs (strings)\n    }\n\n\n\n\nFor our purposes, we will use the \nextra\n field for a few purposes:\n\n\n\n\nTo log the UUID of the item that has been added or changed (e.g. \n\"item_id\": UUID\n)\n\n\nTo log the fields that are modified when an item is updated in the datastore (e.g. \n\"fields\": \"password,notes\"\n  (because the value has to be a string we will have to concat the fields that were updated somehow)\n\n\n\n\nOnce an event is registered, we can record it with:\n\n\nServices.telemetry.recordEvent(category, method, object, null, extra)\n\n\nWhen recording, we can use \nnull\n for \nvalue\n.\n\n\nSee the Events section for specific examples of event registration and recording.\n\n\nScalar recording\n\n\nWe use the js api for scalar recording as well. Here registration happens with the following syntax:\n\n\nServices.telemetry.registerScalars(category, {\n    \nscalar_name\n: {\n        kind: services.Telemetry.SCALAR_TYPE_COUNT, // SCALAR_TYPE_COUNT, SCALAR_TYPE_BOOLEAN. or SCALAR_TYPE_STRING\n        keyed: false,\n        record_on_release: false, // NEEDS TO BE SET TO RECORD ON RELEASE CHANNEL\n        expired: false,\n    }\n\n\n\n\nWe set scalar values in the following way:\n\n\nServices.telemetry.scalarSet(\n    \ncategory.scalar_name\n, value\n);\n\n\n\n\ne.g. \nlockboxV1.datastoreCount\n for the scalar name.\n\n\nWe can also use \nscalarAdd\n to increment a scalar value by some amount.\n\n\nScalar Metrics\n\n\nThese are the metrics we currently collect regarding the state of user datastores.\n\n\n\n\ndatastoreCount\n (integer). Current count of the number of items in the user's datastore. Note that this scalar is only updated when the user renders their full item list, either in the management view or in the doorhanger. So when testing whether this scalar is accurately updated, please re-render the item list.\n\n\n\n\nList of Events Currently Recorded\n\n\nAll events are currently implemented under the \ncategory: lockboxV2\n. The \nextra\n field contains \nitemid\n for events pertaining to a particular Lockbox item. They are listed and grouped together below based on the contents of the event's \nmethod\n field.\n\n\n\n\n\n\nstartup\n fires when the webextension is loaded. \nobjects\n: webextension. Note that this event fires whenever the browser is started, so is not indicative of direct user interaction with Lockbox.\n\n\n\n\n\n\niconClick\n fires when someone clicks the toolbar icon. \nobjects\n: toolbar\n\n\n\n\n\n\nrender\n events fire when the item manager or doorhanger (when implemented) are rendered. \nobjects\n: manage, doorhanger\n\n\n\n\n\n\nitemAdding\n, \nitemUpdating\n, \nitemDeleting\n fire when a user clicks to submit a new item or edit or delete an existing item. \nobjects\n: addItemForm, updatingItemForm\n\n\n\n\n\n\nitemAdded\n, \nitemUpdated\n, \nitemDeleted\n fire after a successful add/update/delete action. \nobjects\n: addItemForm, updatingItemForm\n\n\n\n\n\n\nadded\n, \nupdated\n, \ndeleted\n fire when an item is added/updated/deleted in the backend datastore. Has itemid in the extra field. \nobjects\n: datastore\n\n\n\n\n\n\nitemSelected\n fires when a user clicks an item in the itemlist. \nobjects\n itemList  \n\n\n\n\n\n\nusernameCopied\n and \npasswordCopied\n fire when a user copies their username or password from an item. \nobjects\n: itemDetails\n\n\n\n\n\n\nfeedbackClick\n fires when the user clicks the \"Send Feedback\" button. \nobjects\n: manage\n\n\n\n\n\n\nfaqClick\n fires when the user clicks the \"FAQ\" button. \nobjects\n: manage\n\n\n\n\n\n\n\n\nReferences\n\n\nDocs for the Public JS API that allows us to log events thru an add-on:\n\n\nTelemetry Public JS API", 
            "title": "Telemetry and Metrics"
        }, 
        {
            "location": "/metrics/#lockbox-metrics-plan", 
            "text": "Last Updated: Feb 19, 2018    Analysis  Collection  Event Registration and Recording    Scalar Metrics  List of Events Currently Recorded  References    This is the metrics collection plan for Lockbox. It documents all events currently collected through telemetry, as well those planned for collection but not currently implemented. It will be updated periodically to reflect all new and planned data collection.", 
            "title": "Lockbox Metrics Plan"
        }, 
        {
            "location": "/metrics/#analysis", 
            "text": "Data collection is done solely for the purpose of product development, improvement and maintenance. Specifically, it is done to help its creators examine the validity of the following hypothesis.  Core Hypothesis:  We believe that people want the browser to do more than only remember their passwords.  We will know this to be true when:    The password generator is clicked 20% of the time a new entry is created.  This will indicate that users value the ability to create secure passwords.  (Events regarding password generation will be added when feature development is complete)    75% of Lockbox downloads result in a Firefox account attached.  This will indicate that users value secure storage for their credentials.  We currently record the event  fxaUpgrade  to know whether a user has attached an Firefox account to their lockbox installation.    60% of users choose to import their existing credentials from Firefox into Lockbox.  This will indicate that users trust lockbox more than the browser for managing their credentials.  (Events regarding the importing of credentials from the firefox password manager will be added when feature development is complete)    We observe increased engagement with the management system (Create-Read-Update-Delete; CRUD) for users that import their credentials.  This will indicate that users value greater visibility into the number of accounts that they have.  We currently record  render  events when a user opens the credential manager.    CRUD usage rates are comparable to Firefox login manager usage prior to lockbox installation.  This will indicate that users value Lockbox's credential management system, and use it to access credentials when they are needed.  Firefox telemetry currently collects data on password autofill usage, which requires credentials be stored in the firefox password manager. We plan to compare lockbox credential usage (e.g. via the  usernameCopied  and  passwordCopied  lockbox events) to pre-lockbox autofill frequencies on a per-user basis.    20% of Lockbox users access their datastore on more than 1 device,  indicating that users value having a single datastore of credentials.    Other questions we aim to answer through data collection, but are not directly related to the hypothesis above:   Do people Save Passwords in Lockbox?  How many? (measured by count of items saved per user)  How often? (number of credentials saved per user per time interval)    Do people create their own passwords or use Lockbox to generate them?  Ratio: (Number of times the PW generator is used when storing an item) / (number of credentials stored)    When using the pw generator, do people create purely random passwords or customize them with their own input? (if this is going to be in the final design)  Do people use the passwords they store on Lockbox?  How many times (per some unit of time) do stored credentials get filled?  How many times (per some unit of time) do stored credentials get copied?    How many times do users click to reveal a password?  Do people continue to use Lockbox after first use?  Out of those who install, how many use it more than once?    Where are the drop-off points in the user flow?  Do the majority of people make it all the way through the setup process?  Once initially setup, do people continue to add credentials?    Do people sync their passwords between Firefox instances?  How does syncing affect engagement?", 
            "title": "Analysis"
        }, 
        {
            "location": "/metrics/#collection", 
            "text": "At this point, all measurements related to Lockbox will be made client-side. However, future releases will give users the option to sync their Lockbox data via an FxA account, at which point additional measurements will be logged server-side through the FxA data pipeline. We are not directly responsible for the measurements made through that mechanism.  For our internal alpha release, we will be making use of the public JavaScript API that allows recording and sending of event data and scalar data through an add-on. The API is documented here:  https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/telemetry/collection/events.html#the-api  Once events are logged in the client they should appear in  about:telemetry . From there they will be submitted in the main ping payload under  processes.dynamic.events  and available through the usual services (STMO and ATMO), as well as amplitude.", 
            "title": "Collection"
        }, 
        {
            "location": "/metrics/#event-registration-and-recording", 
            "text": "The events that we will record will conform to the structure expected by the telemetry pipeline. When the events are logged in telemetry they will be a list of:  [timestamp, category, method, object, value, extra]  The API takes care of the timestamp for us. We just need to define  category ,  method ,  object  and  extra  ( value  is optional and we won't use it).  Because we are using the API through an add-on it  isn't  necessary that we include an events.yaml file.  Instead we will define our events by  registering  them using a call to  Services.telemetry.registerEvents(category, eventData) .  Here's a breakdown of how a to register a typical event:  Services.telemetry.registerEvents( event_category , {\n     event_name : {\n        methods: [ click , ... ], // types of events that can occur\n        objects: [ a_button , ... ], // objects event can occur on\n        extra: { key :  value , ... } // key-value pairs (strings)\n    }  For our purposes, we will use the  extra  field for a few purposes:   To log the UUID of the item that has been added or changed (e.g.  \"item_id\": UUID )  To log the fields that are modified when an item is updated in the datastore (e.g.  \"fields\": \"password,notes\"   (because the value has to be a string we will have to concat the fields that were updated somehow)   Once an event is registered, we can record it with:  Services.telemetry.recordEvent(category, method, object, null, extra)  When recording, we can use  null  for  value .  See the Events section for specific examples of event registration and recording.", 
            "title": "Event Registration and Recording"
        }, 
        {
            "location": "/metrics/#scalar-recording", 
            "text": "We use the js api for scalar recording as well. Here registration happens with the following syntax:  Services.telemetry.registerScalars(category, {\n     scalar_name : {\n        kind: services.Telemetry.SCALAR_TYPE_COUNT, // SCALAR_TYPE_COUNT, SCALAR_TYPE_BOOLEAN. or SCALAR_TYPE_STRING\n        keyed: false,\n        record_on_release: false, // NEEDS TO BE SET TO RECORD ON RELEASE CHANNEL\n        expired: false,\n    }  We set scalar values in the following way:  Services.telemetry.scalarSet(\n     category.scalar_name , value\n);  e.g.  lockboxV1.datastoreCount  for the scalar name.  We can also use  scalarAdd  to increment a scalar value by some amount.", 
            "title": "Scalar recording"
        }, 
        {
            "location": "/metrics/#scalar-metrics", 
            "text": "These are the metrics we currently collect regarding the state of user datastores.   datastoreCount  (integer). Current count of the number of items in the user's datastore. Note that this scalar is only updated when the user renders their full item list, either in the management view or in the doorhanger. So when testing whether this scalar is accurately updated, please re-render the item list.", 
            "title": "Scalar Metrics"
        }, 
        {
            "location": "/metrics/#list-of-events-currently-recorded", 
            "text": "All events are currently implemented under the  category: lockboxV2 . The  extra  field contains  itemid  for events pertaining to a particular Lockbox item. They are listed and grouped together below based on the contents of the event's  method  field.    startup  fires when the webextension is loaded.  objects : webextension. Note that this event fires whenever the browser is started, so is not indicative of direct user interaction with Lockbox.    iconClick  fires when someone clicks the toolbar icon.  objects : toolbar    render  events fire when the item manager or doorhanger (when implemented) are rendered.  objects : manage, doorhanger    itemAdding ,  itemUpdating ,  itemDeleting  fire when a user clicks to submit a new item or edit or delete an existing item.  objects : addItemForm, updatingItemForm    itemAdded ,  itemUpdated ,  itemDeleted  fire after a successful add/update/delete action.  objects : addItemForm, updatingItemForm    added ,  updated ,  deleted  fire when an item is added/updated/deleted in the backend datastore. Has itemid in the extra field.  objects : datastore    itemSelected  fires when a user clicks an item in the itemlist.  objects  itemList      usernameCopied  and  passwordCopied  fire when a user copies their username or password from an item.  objects : itemDetails    feedbackClick  fires when the user clicks the \"Send Feedback\" button.  objects : manage    faqClick  fires when the user clicks the \"FAQ\" button.  objects : manage", 
            "title": "List of Events Currently Recorded"
        }, 
        {
            "location": "/metrics/#references", 
            "text": "Docs for the Public JS API that allows us to log events thru an add-on:  Telemetry Public JS API", 
            "title": "References"
        }, 
        {
            "location": "/SECURITY/", 
            "text": "Mozilla Security\n\n\n\n\n\n\nMozilla cares about privacy and security. For more information please see: \nhttps://www.mozilla.org/security/\n\n\n\n\n\n\nIf you believe that you've found a security vulnerability, please report it by sending email to the addresses: \nsecurity@mozilla.org\n and \nlockbox-dev@mozilla.com", 
            "title": "Mozilla Security"
        }, 
        {
            "location": "/SECURITY/#mozilla-security", 
            "text": "Mozilla cares about privacy and security. For more information please see:  https://www.mozilla.org/security/    If you believe that you've found a security vulnerability, please report it by sending email to the addresses:  security@mozilla.org  and  lockbox-dev@mozilla.com", 
            "title": "Mozilla Security"
        }, 
        {
            "location": "/developer/install/", 
            "text": "Installing the Lockbox Addon\n\n\nInstalling dependencies\n\n\nTo \ninstall the project dependencies\n, you can run:\n\n\nnpm install\n\n\n\n\nBuilding the source code\n\n\nTo \nbuild the project\n, you can run:\n\n\nnpm run build\n\n\n\n\nThis puts all the necessary files in the \ndist/\n directory, which you can then\ntemporarily load into Firefox (e.g. \nabout:debugging\n).\n\n\nBuilding the extension\n\n\nTo \nbuild an extension .zip\n, you can run:\n\n\nnpm run package\n\n\n\n\nThis puts the addon bundle in the \naddons/\n directory.\n\n\n:warning: The resulting add-on is unsigned and likely won't work on release\nversions of Firefox. You can flip the \nxpinstall.signatures.required\n preference\non other channels accordingly.\n\n\nRunning the extension\n\n\nTo \nrun the extension\n in Firefox, you can run:\n\n\nnpm run run -- -f nightly\n\n\n\n\nThis will automatically create a fresh new user profile that will not persist\nbetween runs. This means the data will be lost every time.\n\n\nRunning the extension with a persistent profile\n\n\nTo \nrun the extension with a profile that persists\n between runs, you can\ncreate a new profile by browsing to \nabout:profiles\n.\n\n\nOnce you have a new profile created (no matter the location), you can tell jpm\n(via npm) to run using that profile \nand\n not to copy the profile temporarily\nso that any changes (e.g. adding new entries) will be saved:\n\n\nnpm run run -- -p PROFILE --keep-profile-changes\n\n\n\n\nThe PROFILE value may be a profile name or the path to the profile.\n\n\nNow, when you run using this profile, any data or settings you make to the\nbrowser itself or in Lockbox will be available for future runs.\n\n\nSetting npm run flags\n\n\nTo specify flags for \nrun\n to use regularly, use \nnpm config set webext_runflags\n:\n\n\nnpm config set webext_runflags=\n-f nightly -p PROFILE --keep-profile-changes\n\n\n\n\n\nThis way if you want to always test locally using an existing profile (with\nexample data) using Firefox Nightly, you can just run (without adding flags):\n\n\nnpm run run", 
            "title": "Build and Install"
        }, 
        {
            "location": "/developer/install/#installing-the-lockbox-addon", 
            "text": "", 
            "title": "Installing the Lockbox Addon"
        }, 
        {
            "location": "/developer/install/#installing-dependencies", 
            "text": "To  install the project dependencies , you can run:  npm install", 
            "title": "Installing dependencies"
        }, 
        {
            "location": "/developer/install/#building-the-source-code", 
            "text": "To  build the project , you can run:  npm run build  This puts all the necessary files in the  dist/  directory, which you can then\ntemporarily load into Firefox (e.g.  about:debugging ).", 
            "title": "Building the source code"
        }, 
        {
            "location": "/developer/install/#building-the-extension", 
            "text": "To  build an extension .zip , you can run:  npm run package  This puts the addon bundle in the  addons/  directory.  :warning: The resulting add-on is unsigned and likely won't work on release\nversions of Firefox. You can flip the  xpinstall.signatures.required  preference\non other channels accordingly.", 
            "title": "Building the extension"
        }, 
        {
            "location": "/developer/install/#running-the-extension", 
            "text": "To  run the extension  in Firefox, you can run:  npm run run -- -f nightly  This will automatically create a fresh new user profile that will not persist\nbetween runs. This means the data will be lost every time.", 
            "title": "Running the extension"
        }, 
        {
            "location": "/developer/install/#running-the-extension-with-a-persistent-profile", 
            "text": "To  run the extension with a profile that persists  between runs, you can\ncreate a new profile by browsing to  about:profiles .  Once you have a new profile created (no matter the location), you can tell jpm\n(via npm) to run using that profile  and  not to copy the profile temporarily\nso that any changes (e.g. adding new entries) will be saved:  npm run run -- -p PROFILE --keep-profile-changes  The PROFILE value may be a profile name or the path to the profile.  Now, when you run using this profile, any data or settings you make to the\nbrowser itself or in Lockbox will be available for future runs.", 
            "title": "Running the extension with a persistent profile"
        }, 
        {
            "location": "/developer/install/#setting-npm-run-flags", 
            "text": "To specify flags for  run  to use regularly, use  npm config set webext_runflags :  npm config set webext_runflags= -f nightly -p PROFILE --keep-profile-changes   This way if you want to always test locally using an existing profile (with\nexample data) using Firefox Nightly, you can just run (without adding flags):  npm run run", 
            "title": "Setting npm run flags"
        }, 
        {
            "location": "/developer/releases/", 
            "text": "Releases\n\n\nChecklist\n\n\nBefore a release can be made, the following must be done:\n\n\n\n\nAny user stories labeled as \nepic\n to be included in the release are approved by Product and PI\n\n\nAll finished work is verified to work as expected and committed to \nmaster\n\n\nAny unfinished work has been triaged and assigned to the appropriate milestone\n\n\nProduct, Engineering, and PI have voiced approval to release (e.g., via Slack team channel)\n\n\n\n\nInstructions\n\n\nNOTE:\n these instructions assume:\n\n\n\n\nAll of the \nchecklist items\n are complete\n\n\nYou are an administrator of the project \nlockbox-extension\n\n\nYour local git working copy has a remote named \nupstream\n pointing to \ngit@github.com:mozilla-lockbox/lockbox-addon.git\n\n\n\n\nTo generate the next release binary:\n\n\n\n\n\n\nUpdate \"version\" in package.json (and package-lock.json)\n\n\n\n\nwe follow the \nsemver\n syntax\n\n\nAlpha\n releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\")\n\n\nBeta\n releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\")\n\n\nStable\n releases will \nnot\n be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\")\n\n\n\n\n\n\n\n\nUpdate \ndocs/release-notes.md\n:\n\n\n\n\nlatest release is at the top, under a second-level header\n\n\neach release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\"\n\n\nconsult with Product Management on wording if needed\n\n\n\n\n\n\n\n\nCommit and ultimately merge to \nmaster\n branch\n\n\n\n\n\n\nCreate a pull request on GitHub \ncomparing changes from the \nmaster\n branch against/to \nproduction\n\n\n\n\nOpen the pull request so we can show the changes, CI status, and approvals\n\n\nRequest an approval from the P.I. and Product representatives\n\n\nOnce the release has been reviewed, tested, and approved to go live, merge and close the pull request\n\n\nTest Pilot's Jenkins will then build, sign, and deploy the extension (see \n\"Extension Signing\"\n)\n\n\n\n\n\n\n\n\nTag the latest commit on \nmaster\n branch with an annotated version and push the tag:\n\n\n\n\ngit tag -a -m \"Release 0.1.0\" 0.1.0\n\n\ngit push upstream 0.1.0\n\n\nTravis-CI will build and generate a \nGitHub Release\n\n\n\n\n\n\n\n\nEdit the resulting GitHub Release\n\n\n\n\nSet the \nGitHub Release\n title to match the version\n\n\nSet the GitHub Release notes to match the \ndocs/release-notes.md\n\n\nDownload the signed add-on: \nwget -O signed-addon.xpi https://testpilot.firefox.com/files/lockbox@mozilla.com/latest\n\n\nAttach to the GitHub Release the downloaded signed add-on\n\n\n\n\n\n\n\n\nSend an announcement to the team (e.g., via Slack team channel)\n\n\n\n\n\n\nExtension Signing\n\n\nLearn about the Test Pilot extension deployment and hosting process here:\n\nhttps://github.com/mozilla/testpilot/blob/master/docs/development/hosting.md\n\n\nThis repository is in the \n\"testpilot-mozillaextension\"\n Jenkins pipeline.\nThe CloudOps team manages access to, and can help report on, the status of the\nbuilds.\n\n\nThe resulting files deployed are:\n\n\n\n\nUpdates file for automatic browser extension updates: \nhttps://testpilot.firefox.com/files/lockbox@mozilla.com/updates.json\n\n\nLatest version of the signed extension XPI: \nhttps://testpilot.firefox.com/files/lockbox@mozilla.com/latest\n\n\n\n\nIMPORTANT:\n Test Pilot reports the status of build, signing, and deployment of its artifacts on the IRC channel \n#testpilot-bots\n.  Be sure to join the channel prior to pushing the \nproduction\n branch to GitHub in order to receive the status updates.", 
            "title": "Release Instructions"
        }, 
        {
            "location": "/developer/releases/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/developer/releases/#checklist", 
            "text": "Before a release can be made, the following must be done:   Any user stories labeled as  epic  to be included in the release are approved by Product and PI  All finished work is verified to work as expected and committed to  master  Any unfinished work has been triaged and assigned to the appropriate milestone  Product, Engineering, and PI have voiced approval to release (e.g., via Slack team channel)", 
            "title": "Checklist"
        }, 
        {
            "location": "/developer/releases/#instructions", 
            "text": "NOTE:  these instructions assume:   All of the  checklist items  are complete  You are an administrator of the project  lockbox-extension  Your local git working copy has a remote named  upstream  pointing to  git@github.com:mozilla-lockbox/lockbox-addon.git   To generate the next release binary:    Update \"version\" in package.json (and package-lock.json)   we follow the  semver  syntax  Alpha  releases will be labeled with \"-alpha\" (e.g., \"0.1.0-alpha\")  Beta  releases will be labeled with \"-beta\" (e.g., \"1.0.0-beta\")  Stable  releases will  not  be labeled, and follow semver from the last Beta release (e.g., \"1.0.0\")     Update  docs/release-notes.md :   latest release is at the top, under a second-level header  each release includes the sub headings \"What's New\", \"What's Fixed\", and \"Known Issues\"  consult with Product Management on wording if needed     Commit and ultimately merge to  master  branch    Create a pull request on GitHub  comparing changes from the  master  branch against/to  production   Open the pull request so we can show the changes, CI status, and approvals  Request an approval from the P.I. and Product representatives  Once the release has been reviewed, tested, and approved to go live, merge and close the pull request  Test Pilot's Jenkins will then build, sign, and deploy the extension (see  \"Extension Signing\" )     Tag the latest commit on  master  branch with an annotated version and push the tag:   git tag -a -m \"Release 0.1.0\" 0.1.0  git push upstream 0.1.0  Travis-CI will build and generate a  GitHub Release     Edit the resulting GitHub Release   Set the  GitHub Release  title to match the version  Set the GitHub Release notes to match the  docs/release-notes.md  Download the signed add-on:  wget -O signed-addon.xpi https://testpilot.firefox.com/files/lockbox@mozilla.com/latest  Attach to the GitHub Release the downloaded signed add-on     Send an announcement to the team (e.g., via Slack team channel)", 
            "title": "Instructions"
        }, 
        {
            "location": "/developer/releases/#extension-signing", 
            "text": "Learn about the Test Pilot extension deployment and hosting process here: \nhttps://github.com/mozilla/testpilot/blob/master/docs/development/hosting.md  This repository is in the  \"testpilot-mozillaextension\"  Jenkins pipeline.\nThe CloudOps team manages access to, and can help report on, the status of the\nbuilds.  The resulting files deployed are:   Updates file for automatic browser extension updates:  https://testpilot.firefox.com/files/lockbox@mozilla.com/updates.json  Latest version of the signed extension XPI:  https://testpilot.firefox.com/files/lockbox@mozilla.com/latest   IMPORTANT:  Test Pilot reports the status of build, signing, and deployment of its artifacts on the IRC channel  #testpilot-bots .  Be sure to join the channel prior to pushing the  production  branch to GitHub in order to receive the status updates.", 
            "title": "Extension Signing"
        }, 
        {
            "location": "/developer/directory-structure/", 
            "text": "Directory Structure\n\n\nThe following provides a brief outline of the directory structure of this project.\n\n\ndocs/\n\n\nDocumentation that gets built and deploy to GitHub pages (you're reading it!).\n\n\nsrc/\n\n\nThis is where all of the source code for this project lives.\n\n\nsrc/background/\n\n\nAny code meant to run in a background page lives here. For more information, see the \nREADME.md\n in this directory.\n\n\nsrc/list/\n\n\nCommon code for all the list views in the extension, as well as the specific views themselves (in subdirectories). For more information, see the \nREADME.md\n in this directory.\n\n\nsrc/list/manage/\n\n\nThe full-tab management UI.\n\n\nsrc/list/popup/\n\n\nThe \"doorhanger\" UI.\n\n\nsrc/locales/\n\n\nAll the strings for each locale, in subdirectories with the locale name. For more information, see the \nREADME.md\n in this directory.\n\n\nsrc/widgets/\n\n\nAll the common UI widgets used throughout the source. For more information, see the \nREADME.md\n in this directory.\n\n\ntest/\n\n\nThis is where all of the tests for this project live.\n\n\ntest/integration/\n\n\nEnd-to-end integration tests operating on a compiled version of the add-on running in Firefox. These tests are written in Javascript using Mocha and \nwebextensions-geckodriver\n.\n\n\ntest/unit/\n\n\nUnit tests testing individual components of the source code. These are writen in Javascript using Mocha/Chai and run via Karma. The subdirectories of this directory match the subdirectories of \nsrc/webextension\n.", 
            "title": "Directory Structure"
        }, 
        {
            "location": "/developer/directory-structure/#directory-structure", 
            "text": "The following provides a brief outline of the directory structure of this project.", 
            "title": "Directory Structure"
        }, 
        {
            "location": "/developer/directory-structure/#docs", 
            "text": "Documentation that gets built and deploy to GitHub pages (you're reading it!).", 
            "title": "docs/"
        }, 
        {
            "location": "/developer/directory-structure/#src", 
            "text": "This is where all of the source code for this project lives.", 
            "title": "src/"
        }, 
        {
            "location": "/developer/directory-structure/#srcbackground", 
            "text": "Any code meant to run in a background page lives here. For more information, see the  README.md  in this directory.", 
            "title": "src/background/"
        }, 
        {
            "location": "/developer/directory-structure/#srclist", 
            "text": "Common code for all the list views in the extension, as well as the specific views themselves (in subdirectories). For more information, see the  README.md  in this directory.", 
            "title": "src/list/"
        }, 
        {
            "location": "/developer/directory-structure/#srclistmanage", 
            "text": "The full-tab management UI.", 
            "title": "src/list/manage/"
        }, 
        {
            "location": "/developer/directory-structure/#srclistpopup", 
            "text": "The \"doorhanger\" UI.", 
            "title": "src/list/popup/"
        }, 
        {
            "location": "/developer/directory-structure/#srclocales", 
            "text": "All the strings for each locale, in subdirectories with the locale name. For more information, see the  README.md  in this directory.", 
            "title": "src/locales/"
        }, 
        {
            "location": "/developer/directory-structure/#srcwidgets", 
            "text": "All the common UI widgets used throughout the source. For more information, see the  README.md  in this directory.", 
            "title": "src/widgets/"
        }, 
        {
            "location": "/developer/directory-structure/#test", 
            "text": "This is where all of the tests for this project live.", 
            "title": "test/"
        }, 
        {
            "location": "/developer/directory-structure/#testintegration", 
            "text": "End-to-end integration tests operating on a compiled version of the add-on running in Firefox. These tests are written in Javascript using Mocha and  webextensions-geckodriver .", 
            "title": "test/integration/"
        }, 
        {
            "location": "/developer/directory-structure/#testunit", 
            "text": "Unit tests testing individual components of the source code. These are writen in Javascript using Mocha/Chai and run via Karma. The subdirectories of this directory match the subdirectories of  src/webextension .", 
            "title": "test/unit/"
        }, 
        {
            "location": "/developer/test-plan/", 
            "text": "Test Plan: lockbox-extension\n\n\nOwnership\n\n\n\n\nProduct Integrity: Matt Brandt\n\n\nProduct Manager: Sandy Sage\n\n\nEngineering Manager: Devin Reams\n\n\nEngineering Leads: Matthew Miller\n\n\n\n\nPurpose\n\n\nTest scope for Q3 and Q4 of the Lockbox Firefox extension. Q3 will take the project through the internal Alpha phase of the product to Q4 when the team will tune a product that we can ship as a limited Beta to external users via Test Pilot.\n\n\nEntry Criteria\n\n\n\n\nQA has access to all PRDs, mocks, and related documents.\n\n\nA run script that installs the WebExtension for Firefox Nightly\n\n\nA compiled and signed extension for Firefox Beta and Release\n\n\nStaging and release channels\n\n\n\n\nExit Criteria\n\n\n\n\nAll bugs against the features have been triaged\n\n\nAll milestone features tagged as user stories and TxP have been resolved fixed and verified by Product Integrity\n\n\nSign off criteria have been met\n\n\n\n\nAcceptance Criteria\n\n\nThis section broadly defines when the product is ready to ship\n\n\n\n\nQA has signed off\n\n\nProduct confirms we are feature complete\n\n\nEngineering confirms we are feature complete\n\n\na11y-review sign off\n\n\nSec review completed and sign off\n\n\nAll info is localized at least for a pre-defined set of locales\n\n\nAll telemetry requirements are in place\n\n\nAll the necessary PR and blog posts have been sent out\n\n\n\n\nTimelines and Milestones\n\n\nAlpha - estimated Q3 timeline\n\n\n\n\nJuly: lay the foundation for system add-on with embedded WebExtension development\n\n\nAugust: begin secure storage and front-end editor design and implementation\n\n\nSeptember: finish editor and storage, package for release\n\n\n\n\nBeta - estimated Q4 timeline\n\n\n\n\nThe team moves to 2 week sprints that include epics and user stories.\n\n\nTracking of these user stories and associated features to take place in Github issues\n\n\nDecember: external \"Beta\" launch to public\n\n\n\n\nTesting Summary\n\n\nThis section describes which components will be the focus of the test team.\n\n\nIn Scope\n\n\n\n\nInvolvement standing up CI for unit test and integration testing\n\n\nParticipate in code reviews\n\n\nDefinition of user stories\n\n\nAuthoring and executing manual test cases\n\n\nAuthoring automated test cases, shared responsibility with the dev team\n\n\nAccessibility review\n\n\nPerformance testing\n\n\n\n\nOut of Scope\n\n\n\n\nSecurity testing\n\n\nInternal - security group\n\n\nExternal - ekr and a published report\n\n\n\n\n\n\nTesting for ESR\n\n\n\n\nRequirements for testing\n\n\nEnvironments\n\n\nAlpha and Beta\n\n\nLockbox Extension\n\n\n\n\n\n\nDesktop - Windows 10, macOS [latest]\n\n\n\n\nFirefox\n\n\n\n\n\n\n\n\nLockbox DataStore\n\n\n\n\nDesktop\n\n\n\n\nSpecifications\n\n\n\n\nWebextension (url)\n\n\nDatastore (url)\n\n\n\n\nTest Strategy\n\n\nUser stories\n\n\nIn Q3 we ideated on a focal point for the team to begin work on, the below list are these high level stories.\n\n\nFuture work will be tracked in github through \nthe use of epics\n and their dependendent user stories.\n\n\n\n\nAs a Firefox Account user, I can set it up in 5 clicks or less, and retrieve and fill my credentials in 3 clicks or less.\n\n\nAs a security conscious user, I understand the value of the password manager, what it is going to do for me without making me feel overwhelmed. I'm notified of the password manager when I'm ready to make the most use of it, and I can set up and access my accounts as easily as writing them down in a document or notebook.\n\n\nWhen I log into websites and applications, I want to ensure my identity is protected, so only I can securely access my accounts with my identity.\n\n\nWhen I create a new account online I want to save the newly created credentials so I can quickly log in the next time I need access to that account.\n\n\nWhen I go to sign into an account, I want my account credentials to populate the form fields when available, and be accessible in one location when not.\n\n\nWhen I need to change my account credentials, I want to be able to access my credentials and update them with recovery options to restore previous account credentials.\n\n\nWhen I want to access my account on my mobile device, I want my account credentials accessible from when I saved them in the browser last, and vice versa, ideally without having to navigate to one location to then manually type in the credentials as viewable on screen.\n\n\n\n\nBuilds\n\n\n\n\nCurrently builds are done on an as needed basis using the installation steps in the ReadMe and docs.\n\n\nTest Pilot build, signing and extension hosting pipeline for internal extension signing and distribution\n\n\n\n\nTesting Tools\n\n\n\n\nTest case creation - \nTestRail\n\n\nManual test case execution - \nTestRail\n\n\nBug management - \nGitHub issues\n\n\nTest automation - FoxPuppet and Selenium\n\n\n\n\nOther Things\n\n\n\n\nReverting to an older version of Firefox\n\n\nCommodity hardware that matches our target user segment\n\n\nConnectivity requirements \n user experience on a diverse range of networks\n\n\nEnsure keyboard only use of the application function (desktop only)\n\n\nMulti-stage workflows are logical and require as few interactions as possible.\n\n\nWhen appropriate provide indications of how far through the process the user is and how much further\n\n\nAvoidance of jargon and slang\n\n\nImportant points and content are highlighted in some way\n\n\nUser errors are clearly highlighted with help messages that suggest solutions\n\n\n\n\nSign Off\n\n\nCriteria\n\n\n\n\n\n\nAll test cases have been executed\n\n\n\n\n\n\nA sufficient level of automated test coverage has been achieved (measured by code coverage tools). Test coverage will also be measured against reduction of risk in the areas designated by the risk assessment plan.\n\n\n\n\n\n\nAll blockers, criticals must be fixed and verified or have an agreed-upon timeline for being fixed (as determined by engineering/QA)\n\n\n\n\n\n\nChecklist\n\n\n\n\n\n\n\n\nExit Criteria\n\n\nOwner\n\n\nStatus\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nTesting Prerequisites (specs, use cases)\n\n\n\n\n\n\n\n\n\n\n\n\nTesting Infrastructure setup\n\n\n\n\n\n\n\n\n\n\n\n\nTest Plan Creation\n\n\n\n\n\n\n\n\n\n\n\n\nTest Cases Creation\n\n\n\n\n\n\n\n\n\n\n\n\nFull Functional Tests Execution\n\n\n\n\n\n\n\n\n\n\n\n\nAutomation Coverage\n\n\n\n\n\n\n\n\n\n\n\n\nPerformance Testing\n\n\n\n\n\n\n\n\n\n\n\n\nAll Defects Logged\n\n\n\n\n\n\n\n\n\n\n\n\nCritical/Blockers Fixed and Verified\n\n\n\n\n\n\n\n\n\n\n\n\nProduct Team\n\n\n\n\n\n\n\n\n\n\n\n\nEngineering Team\n\n\n\n\n\n\n\n\n\n\n\n\nMetrics/Telemetry\n\n\n\n\n\n\n\n\n\n\n\n\nA11y\n\n\n\n\n\n\n\n\n\n\n\n\nl10n\n\n\n\n\n\n\n\n\n\n\n\n\nSecurity", 
            "title": "Test Plan"
        }, 
        {
            "location": "/developer/test-plan/#test-plan-lockbox-extension", 
            "text": "", 
            "title": "Test Plan: lockbox-extension"
        }, 
        {
            "location": "/developer/test-plan/#ownership", 
            "text": "Product Integrity: Matt Brandt  Product Manager: Sandy Sage  Engineering Manager: Devin Reams  Engineering Leads: Matthew Miller", 
            "title": "Ownership"
        }, 
        {
            "location": "/developer/test-plan/#purpose", 
            "text": "Test scope for Q3 and Q4 of the Lockbox Firefox extension. Q3 will take the project through the internal Alpha phase of the product to Q4 when the team will tune a product that we can ship as a limited Beta to external users via Test Pilot.", 
            "title": "Purpose"
        }, 
        {
            "location": "/developer/test-plan/#entry-criteria", 
            "text": "QA has access to all PRDs, mocks, and related documents.  A run script that installs the WebExtension for Firefox Nightly  A compiled and signed extension for Firefox Beta and Release  Staging and release channels", 
            "title": "Entry Criteria"
        }, 
        {
            "location": "/developer/test-plan/#exit-criteria", 
            "text": "All bugs against the features have been triaged  All milestone features tagged as user stories and TxP have been resolved fixed and verified by Product Integrity  Sign off criteria have been met", 
            "title": "Exit Criteria"
        }, 
        {
            "location": "/developer/test-plan/#acceptance-criteria", 
            "text": "This section broadly defines when the product is ready to ship   QA has signed off  Product confirms we are feature complete  Engineering confirms we are feature complete  a11y-review sign off  Sec review completed and sign off  All info is localized at least for a pre-defined set of locales  All telemetry requirements are in place  All the necessary PR and blog posts have been sent out", 
            "title": "Acceptance Criteria"
        }, 
        {
            "location": "/developer/test-plan/#timelines-and-milestones", 
            "text": "Alpha - estimated Q3 timeline   July: lay the foundation for system add-on with embedded WebExtension development  August: begin secure storage and front-end editor design and implementation  September: finish editor and storage, package for release   Beta - estimated Q4 timeline   The team moves to 2 week sprints that include epics and user stories.  Tracking of these user stories and associated features to take place in Github issues  December: external \"Beta\" launch to public", 
            "title": "Timelines and Milestones"
        }, 
        {
            "location": "/developer/test-plan/#testing-summary", 
            "text": "This section describes which components will be the focus of the test team.", 
            "title": "Testing Summary"
        }, 
        {
            "location": "/developer/test-plan/#in-scope", 
            "text": "Involvement standing up CI for unit test and integration testing  Participate in code reviews  Definition of user stories  Authoring and executing manual test cases  Authoring automated test cases, shared responsibility with the dev team  Accessibility review  Performance testing", 
            "title": "In Scope"
        }, 
        {
            "location": "/developer/test-plan/#out-of-scope", 
            "text": "Security testing  Internal - security group  External - ekr and a published report    Testing for ESR", 
            "title": "Out of Scope"
        }, 
        {
            "location": "/developer/test-plan/#requirements-for-testing", 
            "text": "", 
            "title": "Requirements for testing"
        }, 
        {
            "location": "/developer/test-plan/#environments", 
            "text": "", 
            "title": "Environments"
        }, 
        {
            "location": "/developer/test-plan/#alpha-and-beta", 
            "text": "", 
            "title": "Alpha and Beta"
        }, 
        {
            "location": "/developer/test-plan/#lockbox-extension", 
            "text": "Desktop - Windows 10, macOS [latest]   Firefox", 
            "title": "Lockbox Extension"
        }, 
        {
            "location": "/developer/test-plan/#lockbox-datastore", 
            "text": "Desktop", 
            "title": "Lockbox DataStore"
        }, 
        {
            "location": "/developer/test-plan/#specifications", 
            "text": "Webextension (url)  Datastore (url)", 
            "title": "Specifications"
        }, 
        {
            "location": "/developer/test-plan/#test-strategy", 
            "text": "", 
            "title": "Test Strategy"
        }, 
        {
            "location": "/developer/test-plan/#user-stories", 
            "text": "In Q3 we ideated on a focal point for the team to begin work on, the below list are these high level stories.  Future work will be tracked in github through  the use of epics  and their dependendent user stories.   As a Firefox Account user, I can set it up in 5 clicks or less, and retrieve and fill my credentials in 3 clicks or less.  As a security conscious user, I understand the value of the password manager, what it is going to do for me without making me feel overwhelmed. I'm notified of the password manager when I'm ready to make the most use of it, and I can set up and access my accounts as easily as writing them down in a document or notebook.  When I log into websites and applications, I want to ensure my identity is protected, so only I can securely access my accounts with my identity.  When I create a new account online I want to save the newly created credentials so I can quickly log in the next time I need access to that account.  When I go to sign into an account, I want my account credentials to populate the form fields when available, and be accessible in one location when not.  When I need to change my account credentials, I want to be able to access my credentials and update them with recovery options to restore previous account credentials.  When I want to access my account on my mobile device, I want my account credentials accessible from when I saved them in the browser last, and vice versa, ideally without having to navigate to one location to then manually type in the credentials as viewable on screen.", 
            "title": "User stories"
        }, 
        {
            "location": "/developer/test-plan/#builds", 
            "text": "Currently builds are done on an as needed basis using the installation steps in the ReadMe and docs.  Test Pilot build, signing and extension hosting pipeline for internal extension signing and distribution", 
            "title": "Builds"
        }, 
        {
            "location": "/developer/test-plan/#testing-tools", 
            "text": "Test case creation -  TestRail  Manual test case execution -  TestRail  Bug management -  GitHub issues  Test automation - FoxPuppet and Selenium", 
            "title": "Testing Tools"
        }, 
        {
            "location": "/developer/test-plan/#other-things", 
            "text": "Reverting to an older version of Firefox  Commodity hardware that matches our target user segment  Connectivity requirements   user experience on a diverse range of networks  Ensure keyboard only use of the application function (desktop only)  Multi-stage workflows are logical and require as few interactions as possible.  When appropriate provide indications of how far through the process the user is and how much further  Avoidance of jargon and slang  Important points and content are highlighted in some way  User errors are clearly highlighted with help messages that suggest solutions", 
            "title": "Other Things"
        }, 
        {
            "location": "/developer/test-plan/#sign-off", 
            "text": "", 
            "title": "Sign Off"
        }, 
        {
            "location": "/developer/test-plan/#criteria", 
            "text": "All test cases have been executed    A sufficient level of automated test coverage has been achieved (measured by code coverage tools). Test coverage will also be measured against reduction of risk in the areas designated by the risk assessment plan.    All blockers, criticals must be fixed and verified or have an agreed-upon timeline for being fixed (as determined by engineering/QA)", 
            "title": "Criteria"
        }, 
        {
            "location": "/developer/test-plan/#checklist", 
            "text": "Exit Criteria  Owner  Status  Notes      Testing Prerequisites (specs, use cases)       Testing Infrastructure setup       Test Plan Creation       Test Cases Creation       Full Functional Tests Execution       Automation Coverage       Performance Testing       All Defects Logged       Critical/Blockers Fixed and Verified       Product Team       Engineering Team       Metrics/Telemetry       A11y       l10n       Security", 
            "title": "Checklist"
        }, 
        {
            "location": "/developer/test-plan-accessibility/", 
            "text": "Manual Test Plan\n\n\nKeyboard Navigation\n\n\n 3 hours\n\n\nNavigate the web content using only the keyboard:\n\n\n\n\nTab Order:\nTAB\n, as well as \nSHIFT + TAB\n, follows a logical and intuitive order.\n\n\nAll controls, links, buttons, etc., get focused.\n\n\nFocus should be visibly apparent.\n\n\nWhen a modal or pop up window opens, focus shifts to the pop up.\n\n\nFocus and tab order is constrained within the modal.\n\n\nModal can be exited via keyboard.\n\n\nWhen a pop up window is closed, focus returns to a logical point.\n\n\nEnsure that all content that is visually hidden is also hidden from the keyboard and/or a screen reader. \nExcept content specifically for screen reader users.\n\n\nFirefox toolbar icon can be accessed by keyboard and screen reader users.\n\n\n\n\nPage Structure\n\n\n3 hours\n\n\n\n\nLinks and buttons have text that give context.\n\n\nAll images contain alt text to describe the purpose or content of the image to a non-sighted user.\n\n\nA logical hierarchy of header tags has been used.\n\n\nARIA landmark roles\n have been utilized where applicable.\n\n\nARIA attributes have been put into use.\n\n\nAny custom controls have been given the proper role attribute.\n\n\nState changes are provided via \nARIA states\n.\n\n\n\n\n\n\nForm input fields and buttons have been labeled for screen reader users.\n\n\n\n\nColor\n\n\n 1 hour\n\n\n\n\nText has sufficient color contrast against its background.\n\n\nContrast ratio of 4.5:1 for normal text (less than 18 point or 14 point bold.)\n\n\nContrast ratio of 3:1 for large text (at least 18 point or 14 point bold).\n\n\nInformation conveyed via color is also available by other means.\n\n\nButtons and links are visually apparent when they have focus.\n\n\nFocus remains apparent, and contrast remains sufficient, when simulating varying types of colorblindness.  \nColor blind simulators\n\n\n\n\nUX Design Considerations\n\n\n\n\nInteractions available with a mouse are also available using a keyboard.\n\n\nInformation conveyed visually is also available by other means.\n\n\nPop-ups and other state changes are announced to screen readers using appropriate ARIA attributes.\n\n\nTemporary on-screen events give users ample time to receive conveyed information.\n\n\nAnimations are not excessively flashy, as this can cause seizures in some users.\n\n\n\n\nTools and Resources\n\n\nUse a variety of testing tools to analyze pages:\n\n\n\n\naXe developer tools by Deque\n\n\nBrowser developer tools to inspect HTML for logical heading structure and ARIA roles\n\n\nColor blind simulators", 
            "title": "Test Plan - Accessibility"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#manual-test-plan", 
            "text": "", 
            "title": "Manual Test Plan"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#keyboard-navigation", 
            "text": "3 hours  Navigate the web content using only the keyboard:   Tab Order: TAB , as well as  SHIFT + TAB , follows a logical and intuitive order.  All controls, links, buttons, etc., get focused.  Focus should be visibly apparent.  When a modal or pop up window opens, focus shifts to the pop up.  Focus and tab order is constrained within the modal.  Modal can be exited via keyboard.  When a pop up window is closed, focus returns to a logical point.  Ensure that all content that is visually hidden is also hidden from the keyboard and/or a screen reader.  Except content specifically for screen reader users.  Firefox toolbar icon can be accessed by keyboard and screen reader users.", 
            "title": "Keyboard Navigation"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#page-structure", 
            "text": "3 hours   Links and buttons have text that give context.  All images contain alt text to describe the purpose or content of the image to a non-sighted user.  A logical hierarchy of header tags has been used.  ARIA landmark roles  have been utilized where applicable.  ARIA attributes have been put into use.  Any custom controls have been given the proper role attribute.  State changes are provided via  ARIA states .    Form input fields and buttons have been labeled for screen reader users.", 
            "title": "Page Structure"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#color", 
            "text": "1 hour   Text has sufficient color contrast against its background.  Contrast ratio of 4.5:1 for normal text (less than 18 point or 14 point bold.)  Contrast ratio of 3:1 for large text (at least 18 point or 14 point bold).  Information conveyed via color is also available by other means.  Buttons and links are visually apparent when they have focus.  Focus remains apparent, and contrast remains sufficient, when simulating varying types of colorblindness.   Color blind simulators", 
            "title": "Color"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#ux-design-considerations", 
            "text": "Interactions available with a mouse are also available using a keyboard.  Information conveyed visually is also available by other means.  Pop-ups and other state changes are announced to screen readers using appropriate ARIA attributes.  Temporary on-screen events give users ample time to receive conveyed information.  Animations are not excessively flashy, as this can cause seizures in some users.", 
            "title": "UX Design Considerations"
        }, 
        {
            "location": "/developer/test-plan-accessibility/#tools-and-resources", 
            "text": "Use a variety of testing tools to analyze pages:   aXe developer tools by Deque  Browser developer tools to inspect HTML for logical heading structure and ARIA roles  Color blind simulators", 
            "title": "Tools and Resources"
        }, 
        {
            "location": "/developer/test-plan-telemetry/", 
            "text": "Telemetry Test Plan: Lockbox-extension\n\n\nGiven the importance the Lockbox team places on actionable user telemetry, ensuring confidence in the fidelity of that data is vital. Coverage aspects are broken into two distinct areas: test automation and manual testing.\n\n\nUnit tests\n\n\nWhen a new feature is developed or an additional user action needs to be recorded, the developer implementing the new telemetry event will add a unit test to ensure the action creates a ping.\n\n\nManual tests\n\n\nNew telemetry events\n\n\nOnce a new telemetry event is added to a feature and that event has a unit test, the telemetry ping will be manually inspected by either Leif Oines, Product Data Scientist or Product Integrity. The goal of this exercise it to ensure the new event and accompanying unit test are capturing the correct user behavior.\n\n\nRegression testing\n\n\nA small handful of smoke tests will manually be run prior to each release. Note, the team will rely on the underlying unit tests for comprehensive testing of event verification.\n\n\nProduct Integrity will investigate options for automating these tests into the integration test suite. \n\n\nMetrics being gathered\n\n\nFor a comprehensive list of metrics being gathered review the \nLockbox Telemetry Plan\n.", 
            "title": "Test Plan - Telemetry"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#telemetry-test-plan-lockbox-extension", 
            "text": "Given the importance the Lockbox team places on actionable user telemetry, ensuring confidence in the fidelity of that data is vital. Coverage aspects are broken into two distinct areas: test automation and manual testing.", 
            "title": "Telemetry Test Plan: Lockbox-extension"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#unit-tests", 
            "text": "When a new feature is developed or an additional user action needs to be recorded, the developer implementing the new telemetry event will add a unit test to ensure the action creates a ping.", 
            "title": "Unit tests"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#manual-tests", 
            "text": "", 
            "title": "Manual tests"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#new-telemetry-events", 
            "text": "Once a new telemetry event is added to a feature and that event has a unit test, the telemetry ping will be manually inspected by either Leif Oines, Product Data Scientist or Product Integrity. The goal of this exercise it to ensure the new event and accompanying unit test are capturing the correct user behavior.", 
            "title": "New telemetry events"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#regression-testing", 
            "text": "A small handful of smoke tests will manually be run prior to each release. Note, the team will rely on the underlying unit tests for comprehensive testing of event verification.  Product Integrity will investigate options for automating these tests into the integration test suite.", 
            "title": "Regression testing"
        }, 
        {
            "location": "/developer/test-plan-telemetry/#metrics-being-gathered", 
            "text": "For a comprehensive list of metrics being gathered review the  Lockbox Telemetry Plan .", 
            "title": "Metrics being gathered"
        }
    ]
}